// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Workspace {
    id              String @id @default(uuid())
    userId          String
    emoticon        String?
    title           String
    slug            String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())
    
    notes           Note[]
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // The unique constraint on [userId, slug] helps enforce data integrity by preventing duplicate combinations of these fields.
    @@unique([userId, slug])

    // An index is a data structure that improves the speed of data retrieval operations on a database table.
    @@index([userId, slug])
}

model Note {
    id              String @id @default(uuid())
    userId          String
    workspaceId     String
    title           String
    description     String?
    coverImage      String?
    contentJson     String? @db.Text
    contentHTML     String? @db.Text
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())

    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    // The unique constraint on [createdAt, id] helps enforce data integrity by preventing duplicate combinations of these fields.
    @@unique([id, workspaceId])

    // An index is a data structure that improves the speed of data retrieval operations on a database table.
    @@index([userId])
    @@index([workspaceId])
}

// Necessary for Next auth
model Account {
    id                          String  @id @default(cuid())
    userId                      String
    type                        String
    provider                    String
    providerAccountId           String
    refresh_token               String? @db.Text
    refresh_token_expires_in    Int?
    access_token                String? @db.Text
    expires_at                  Int?
    token_type                  String?
    scope                       String?
    id_token                    String? @db.Text
    session_state               String?
    
    user                        User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    notes         Note[]
    workspaces    Workspace[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
